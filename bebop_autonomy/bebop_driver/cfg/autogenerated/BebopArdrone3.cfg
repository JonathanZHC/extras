#!/usr/bin/env python

# BebopArdrone3.cfg
# auto-generated from https://raw.githubusercontent.com/Parrot-Developers/libARCommands/7b5cf7a8009278cf634ee33d5c2ed5dd8e573eb4/Xml/ARDrone3_commands.xml
# Do not modify this file by hand. Check scripts/meta folder for generator files.

PACKAGE = "bebop_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Piloting Settings commands
pilotingsettings_group_gen = gen.add_group("pilotingsettings")
# Set Max Altitude
pilotingsettings_group_gen.add("PilotingSettingsMaxAltitudeCurrent", double_t, 0, "Current altitude max in m", 0 , 0, 160)
# Set Max Tilt
pilotingsettings_group_gen.add("PilotingSettingsMaxTiltCurrent", double_t, 0, "Current tilt max in degree", 0 , -180.0, 180.0)
# @deprecated Enable/Disable absolut control
PilotingSettingsAbsolutControlOn_enum = gen.enum([
    gen.const("PilotingSettingsAbsolutControlOn_OFF", int_t, 0, "Disabled"),
    gen.const("PilotingSettingsAbsolutControlOn_ON", int_t, 1, "Enabled"),
], "1 to enable, 0 to disable")
pilotingsettings_group_gen.add("PilotingSettingsAbsolutControlOn", int_t, 0, "1 to enable, 0 to disable", 0, 0, 1, edit_method=PilotingSettingsAbsolutControlOn_enum)
# Set the distance max of the drone
pilotingsettings_group_gen.add("PilotingSettingsMaxDistanceValue", double_t, 0, "Current max distance in meter", 0 , 0, 160)
# Indication about how the product handle flying over the max distance limitation
PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_enum = gen.enum([
    gen.const("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_OFF", int_t, 0, "Disabled"),
    gen.const("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_ON", int_t, 1, "Enabled"),
], "1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done")
pilotingsettings_group_gen.add("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover", int_t, 0, "1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done", 0, 0, 1, edit_method=PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_enum)
# Enable / Disable Banked Turn mode.
PilotingSettingsBankedTurnValue_enum = gen.enum([
    gen.const("PilotingSettingsBankedTurnValue_OFF", int_t, 0, "Disabled"),
    gen.const("PilotingSettingsBankedTurnValue_ON", int_t, 1, "Enabled"),
], "1 to enable, 0 to disable")
pilotingsettings_group_gen.add("PilotingSettingsBankedTurnValue", int_t, 0, "1 to enable, 0 to disable", 0, 0, 1, edit_method=PilotingSettingsBankedTurnValue_enum)
# Set Min Altitude
pilotingsettings_group_gen.add("PilotingSettingsMinAltitudeCurrent", double_t, 0, "Current altitude min in m", 0 , 0, 160)
# Set Fixed wings circling default direction
PilotingSettingsCirclingDirectionValue_enum = gen.enum([
    gen.const("PilotingSettingsCirclingDirectionValue_CW", int_t, 0, "Circling ClockWise"),
    gen.const("PilotingSettingsCirclingDirectionValue_CCW", int_t, 1, "Circling Counter ClockWise"),
], "The circling direction")
pilotingsettings_group_gen.add("PilotingSettingsCirclingDirectionValue", int_t, 0, "The circling direction", 0, 0, 1, edit_method=PilotingSettingsCirclingDirectionValue_enum)
# Set Fixed wings circling radius
pilotingsettings_group_gen.add("PilotingSettingsCirclingRadiusValue", int_t, 0, "The circling radius in meter", 0 , 0, 160)
# Set Fixed wings circling altitude
pilotingsettings_group_gen.add("PilotingSettingsCirclingAltitudeValue", int_t, 0, "The circling altitude in meter", 0 , 0, 160)
# Set pitch mode
PilotingSettingsPitchModeValue_enum = gen.enum([
    gen.const("PilotingSettingsPitchModeValue_NORMAL", int_t, 0, "Positive pitch values will make the drone lower its nose. Negative pitch values will make the drone raise its nose."),
    gen.const("PilotingSettingsPitchModeValue_INVERTED", int_t, 1, "Pitch commands are inverted. Positive pitch values will make the drone raise its nose. Negative pitch values will make the drone lower its nose."),
], "The Pitch mode")
pilotingsettings_group_gen.add("PilotingSettingsPitchModeValue", int_t, 0, "The Pitch mode", 0, 0, 1, edit_method=PilotingSettingsPitchModeValue_enum)
# Set fixed wings Landing Mode
PilotingSettingsLandingModeValue_enum = gen.enum([
    gen.const("PilotingSettingsLandingModeValue_LINEAR", int_t, 0, "Linear landing."),
    gen.const("PilotingSettingsLandingModeValue_SPIRALE", int_t, 1, "Spirale landing."),
], "The Landing mode")
pilotingsettings_group_gen.add("PilotingSettingsLandingModeValue", int_t, 0, "The Landing mode", 0, 0, 1, edit_method=PilotingSettingsLandingModeValue_enum)

# Speed Settings commands
speedsettings_group_gen = gen.add_group("speedsettings")
# Set Max Vertical speed
speedsettings_group_gen.add("SpeedSettingsMaxVerticalSpeedCurrent", double_t, 0, "Current max vertical speed in m/s", 0 , 0.0, 10.0)
# Set Max Yaw Rotation speed
speedsettings_group_gen.add("SpeedSettingsMaxRotationSpeedCurrent", double_t, 0, "Current max yaw rotation speed in degree/s", 0 , 0, 900.0)
# Presence of hull protection
SpeedSettingsHullProtectionPresent_enum = gen.enum([
    gen.const("SpeedSettingsHullProtectionPresent_OFF", int_t, 0, "Disabled"),
    gen.const("SpeedSettingsHullProtectionPresent_ON", int_t, 1, "Enabled"),
], "1 if present, 0 if not present")
speedsettings_group_gen.add("SpeedSettingsHullProtectionPresent", int_t, 0, "1 if present, 0 if not present", 0, 0, 1, edit_method=SpeedSettingsHullProtectionPresent_enum)
# @deprecated Outdoor property
SpeedSettingsOutdoorOutdoor_enum = gen.enum([
    gen.const("SpeedSettingsOutdoorOutdoor_OFF", int_t, 0, "Disabled"),
    gen.const("SpeedSettingsOutdoorOutdoor_ON", int_t, 1, "Enabled"),
], "1 if outdoor flight, 0 if indoor flight")
speedsettings_group_gen.add("SpeedSettingsOutdoorOutdoor", int_t, 0, "1 if outdoor flight, 0 if indoor flight", 0, 0, 1, edit_method=SpeedSettingsOutdoorOutdoor_enum)
# Set Max Pitch/Rool Rotation speed
speedsettings_group_gen.add("SpeedSettingsMaxPitchRollRotationSpeedCurrent", double_t, 0, "Current max pitch/roll rotation speed in degree/s", 0 , 0, 900.0)

# Network settings commands
networksettings_group_gen = gen.add_group("networksettings")
# Auto-select channel of choosen band
NetworkSettingsWifiSelectionType_enum = gen.enum([
    gen.const("NetworkSettingsWifiSelectionType_auto", int_t, 0, "Auto selection"),
    gen.const("NetworkSettingsWifiSelectionType_manual", int_t, 1, "Manual selection"),
], "The type of wifi selection (auto, manual)")
networksettings_group_gen.add("NetworkSettingsWifiSelectionType", int_t, 0, "The type of wifi selection (auto, manual)", 0, 0, 1, edit_method=NetworkSettingsWifiSelectionType_enum)
NetworkSettingsWifiSelectionBand_enum = gen.enum([
    gen.const("NetworkSettingsWifiSelectionBand_2_4ghz", int_t, 0, "2.4 GHz band"),
    gen.const("NetworkSettingsWifiSelectionBand_5ghz", int_t, 1, "5 GHz band"),
    gen.const("NetworkSettingsWifiSelectionBand_all", int_t, 2, "Both 2.4 and 5 GHz bands"),
], "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all")
networksettings_group_gen.add("NetworkSettingsWifiSelectionBand", int_t, 0, "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all", 0, 0, 2, edit_method=NetworkSettingsWifiSelectionBand_enum)
networksettings_group_gen.add("NetworkSettingsWifiSelectionChannel", int_t, 0, "The channel (not used in auto mode)", 0 , 0, 50)

# Photo settings chosen by the user
picturesettings_group_gen = gen.add_group("picturesettings")
# Set Video stabilization mode
PictureSettingsVideoStabilizationModeMode_enum = gen.enum([
    gen.const("PictureSettingsVideoStabilizationModeMode_roll_pitch", int_t, 0, "Video flat on roll and pitch"),
    gen.const("PictureSettingsVideoStabilizationModeMode_pitch", int_t, 1, "Video flat on pitch only"),
    gen.const("PictureSettingsVideoStabilizationModeMode_roll", int_t, 2, "Video flat on roll only"),
    gen.const("PictureSettingsVideoStabilizationModeMode_none", int_t, 3, "Video follows drone angles"),
], "Video stabilization mode")
picturesettings_group_gen.add("PictureSettingsVideoStabilizationModeMode", int_t, 0, "Video stabilization mode", 0, 0, 3, edit_method=PictureSettingsVideoStabilizationModeMode_enum)

# GPS settings
gpssettings_group_gen = gen.add_group("gpssettings")
# Set user preference for the type of the home position. Note that this is only a preference
GPSSettingsHomeTypeType_enum = gen.enum([
    gen.const("GPSSettingsHomeTypeType_TAKEOFF", int_t, 0, "The drone will try to return to the take off position"),
    gen.const("GPSSettingsHomeTypeType_PILOT", int_t, 1, "The drone will try to return to the pilot position"),
], "The type of the home position")
gpssettings_group_gen.add("GPSSettingsHomeTypeType", int_t, 0, "The type of the home position", 0, 0, 1, edit_method=GPSSettingsHomeTypeType_enum)
# Set the delay after which the drone will automatically try to return home
gpssettings_group_gen.add("GPSSettingsReturnHomeDelayDelay", int_t, 0, "Delay in second", 0 , 0, 120)


exit(gen.generate(PACKAGE, "bebop_driver_nodelet", "BebopArdrone3"))